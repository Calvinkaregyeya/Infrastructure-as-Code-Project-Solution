Description: >
  Calvin Karegyeya | Udacity IAC project 2023
  AWS-CloudFormation script to create to allow EC2 instances where the udagram app will be running.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: UdagramApp

  UdagramSSHKey:
    Description: SSH Key to access udagram host
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: udagram

Mappings:
  WebAppRegion:
    us-west-2:
      HVM64: ami-0d1cd67c26f5fca19

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LBSecGroup
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} LBSecGroup

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSecGroup
      GroupDescription: Allow http to our hosts and SSH access
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        # 80 to 80 important for healthchecks !
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WebServerSecGroup

  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to ec2 and SHH access
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub ${EnvironmentName}-BASTION1-CIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub ${EnvironmentName}-BASTION2-CIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WASG

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${EnvironmentName}-Launch-Template'
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            sudo rm /var/www/html/index.html
            sudo aws s3 cp s3://udagram-app-archive/udagram.zip /var/www/html
            sudo unzip /var/www/html/udagram.zip -d /var/www/html
            echo "it works! Udagram, Udacity" > /var/www/html/index.html
            systemctl restart apache2.service
        IamInstanceProfile:
          Name:
            Fn::ImportValue: !Sub '${EnvironmentName}-IAM-NAME'
        SecurityGroupIds: 
          - Fn::GetAtt:
            - WebAppSG
            - GroupId
        BlockDeviceMappings:
          - DeviceName: '/dev/sdk'
            Ebs:
              VolumeSize: '10'
              DeleteOnTermination: true
              VolumeType: 'gp2'
        ImageId: !FindInMap [WebAppRegion, !Ref 'AWS::Region', HVM64]
        InstanceType: t3.small
        KeyName: !Sub ${UdagramSSHKey}

  WebAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 4
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PRI1-SN'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PRI2-SN'
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - Ref: WebAppTG

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: udagram
      Subnets:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PUB1-SN'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PUB2-SN'
      SecurityGroups:
        - Ref: LBSecGroup

  WebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTG
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  WebAppLR:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTG
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref WebAppListener
      Priority: 1

  WebAppTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: '${EnvironmentName}-VPCID'

  WebAppScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppASG
      Cooldown: 120
      ScalingAdjustment: 1

  #ScalingDown
  WebAppScaleDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppASG
      Cooldown: 120
      ScalingAdjustment: -1

  #CloudWatch alerts
  WebAppCPUHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: 'WebAppCPUUsageHigh'
      AlarmDescription: 'CPU usage is greater than 80% for 5 minutes'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - Ref: 'WebAppScaleUp'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value:
            Ref: 'WebAppASG'

  #CloudWatch alerts
  WebAppCPULowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: 'WebAppCPUUsageLow'
      AlarmDescription: 'CPU usage is less than 25% for 5 minutes'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '25'
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - Ref: 'WebAppScaleDown'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value:
            Ref: 'WebAppASG'

Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Join ['', ['http://', !GetAtt [WebAppLB, DNSName]]]

  WebAppCPUHighAlarm:
    Description: 'CloudWatch to send alarms when EC2 CPU is High'
    Value: !Ref 'WebAppCPUHighAlarm'

  WebAppCPULowAlarm:
    Description: 'CloudWatch to send alarms when EC2 CPU is Low'
    Value: !Ref 'WebAppCPULowAlarm'

  WebAppASG:
    Description: 'Group ID of Auto Scaling Group Reference ID'
    Value: !Ref 'WebAppASG'

  WebAppScaleUp:
    Description: 'Policy ID of Auto Scaling Up'
    Value: !Ref 'WebAppScaleUp'

  WebAppScaleDown:
    Description: 'Policy ID of Auto Scaling Down'
    Value: !Ref 'WebAppScaleDown'